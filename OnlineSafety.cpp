#include <algorithm>
#include <climits>

#include "EternalModLoader.hpp"

const uint8_t BlangJsonMultiplayerDisabled[] = {
    0x7B, 0x0A, 0x20, 0x20, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x22, 0x3A, 0x20, 0x5B,
    0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x22, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x20, 0x22, 0x23, 0x73, 0x74, 0x72, 0x5F,
    0x63, 0x6F, 0x64, 0x65, 0x5F, 0x6D, 0x61, 0x69, 0x6E, 0x6D, 0x65, 0x6E, 0x75, 0x5F, 0x70, 0x6C,
    0x61, 0x79, 0x5F, 0x6F, 0x6E, 0x6C, 0x69, 0x6E, 0x65, 0x5F, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x2C,
    0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22,
    0x3A, 0x20, 0x22, 0x5E, 0x38, 0x4D, 0x75, 0x6C, 0x74, 0x69, 0x70, 0x6C, 0x61, 0x79, 0x65, 0x72,
    0x20, 0x28, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x29, 0x5E, 0x37, 0x22, 0x2C, 0x0A,
    0x09, 0x20, 0x20, 0x7D, 0x0A, 0x20, 0x20, 0x5D, 0x0A, 0x7D
};

const uint8_t GenericSwfData[] = {
    0x25, 0x45, 0x70, 0x00, 0x00, 0x45, 0x07, 0x00, 0x00, 0x3C, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x2C, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x0A, 0x00, 0x00, 0x00, 0x72, 0x6F, 0x6C, 0x6C, 0x4F,
    0x6E, 0x42, 0x61, 0x63, 0x6B, 0x00, 0x00, 0x00, 0x0D, 0x0C, 0x00, 0x00, 0x00, 0x72, 0x6F, 0x6C,
    0x6C, 0x4F, 0x66, 0x66, 0x46, 0x72, 0x6F, 0x6E, 0x74, 0x00, 0x00, 0x00, 0x17, 0x0B, 0x00, 0x00,
    0x00, 0x72, 0x6F, 0x6C, 0x6C, 0x4F, 0x6E, 0x46, 0x72, 0x6F, 0x6E, 0x74, 0x00, 0x00, 0x00, 0x21,
    0x0B, 0x00, 0x00, 0x00, 0x72, 0x6F, 0x6C, 0x6C, 0x4F, 0x66, 0x66, 0x42, 0x61, 0x63, 0x6B, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x0E, 0x26, 0x01, 0x00, 0x01, 0x00,
    0x00, 0x5F, 0x63, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
    0x00, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x5F, 0x66, 0x6C, 0x61, 0x2E, 0x4D, 0x61, 0x69,
    0x6E, 0x54, 0x69, 0x6D, 0x65, 0x6C, 0x69, 0x6E, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04,
    0xBE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x34, 0x0B, 0x67,
    0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x5F, 0x66, 0x6C, 0x61, 0x0C, 0x4D, 0x61, 0x69, 0x6E, 0x54,
    0x69, 0x6D, 0x65, 0x6C, 0x69, 0x6E, 0x65, 0x0D, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x64, 0x69,
    0x73, 0x70, 0x6C, 0x61, 0x79, 0x09, 0x4D, 0x6F, 0x76, 0x69, 0x65, 0x43, 0x6C, 0x69, 0x70, 0x18,
    0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x5F, 0x66, 0x6C, 0x61, 0x3A, 0x4D, 0x61, 0x69, 0x6E,
    0x54, 0x69, 0x6D, 0x65, 0x6C, 0x69, 0x6E, 0x65, 0x00, 0x07, 0x5F, 0x63, 0x65, 0x6E, 0x74, 0x65,
    0x72, 0x06, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x31, 0x07, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x31, 0x32,
    0x07, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x32, 0x32, 0x07, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x33, 0x32,
    0x07, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x34, 0x33, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6C, 0x65,
    0x21, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x61, 0x64, 0x6F, 0x62, 0x65, 0x2E, 0x63, 0x6F,
    0x6D, 0x2F, 0x41, 0x53, 0x33, 0x2F, 0x32, 0x30, 0x30, 0x36, 0x2F, 0x62, 0x75, 0x69, 0x6C, 0x74,
    0x69, 0x6E, 0x0B, 0x61, 0x64, 0x6F, 0x62, 0x65, 0x2E, 0x75, 0x74, 0x69, 0x6C, 0x73, 0x13, 0x66,
    0x6C, 0x61, 0x73, 0x68, 0x2E, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6C, 0x69,
    0x74, 0x79, 0x0D, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x64, 0x65, 0x73, 0x6B, 0x74, 0x6F, 0x70,
    0x0C, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x73, 0x0C, 0x66, 0x6C,
    0x61, 0x73, 0x68, 0x2E, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x0E, 0x66, 0x6C, 0x61, 0x73, 0x68,
    0x2E, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x0D, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E,
    0x66, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x73, 0x0A, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x67, 0x65,
    0x6F, 0x6D, 0x13, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x69,
    0x7A, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x0B, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x6D, 0x65, 0x64,
    0x69, 0x61, 0x09, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x6E, 0x65, 0x74, 0x0D, 0x66, 0x6C, 0x61,
    0x73, 0x68, 0x2E, 0x6E, 0x65, 0x74, 0x2E, 0x64, 0x72, 0x6D, 0x0E, 0x66, 0x6C, 0x61, 0x73, 0x68,
    0x2E, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x69, 0x6E, 0x67, 0x0E, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E,
    0x70, 0x72, 0x6F, 0x66, 0x69, 0x6C, 0x65, 0x72, 0x0D, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x73,
    0x61, 0x6D, 0x70, 0x6C, 0x65, 0x72, 0x0D, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x73, 0x65, 0x6E,
    0x73, 0x6F, 0x72, 0x73, 0x0C, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x73, 0x79, 0x73, 0x74, 0x65,
    0x6D, 0x0A, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x0E, 0x66, 0x6C, 0x61,
    0x73, 0x68, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x2E, 0x69, 0x6D, 0x65, 0x11, 0x66, 0x6C, 0x61, 0x73,
    0x68, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x2E, 0x65, 0x6E, 0x67, 0x69, 0x6E, 0x65, 0x08, 0x66, 0x6C,
    0x61, 0x73, 0x68, 0x2E, 0x75, 0x69, 0x0B, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x75, 0x74, 0x69,
    0x6C, 0x73, 0x09, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x78, 0x6D, 0x6C, 0x17, 0x66, 0x6C, 0x61,
    0x73, 0x68, 0x2E, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x4D, 0x6F, 0x76, 0x69, 0x65,
    0x43, 0x6C, 0x69, 0x70, 0x14, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E, 0x64, 0x69, 0x73, 0x70, 0x6C,
    0x61, 0x79, 0x3A, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x24, 0x66, 0x6C, 0x61, 0x73, 0x68, 0x2E,
    0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4F,
    0x62, 0x6A, 0x65, 0x63, 0x74, 0x43, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x1F, 0x66,
    0x6C, 0x61, 0x73, 0x68, 0x2E, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x49, 0x6E, 0x74,
    0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x1B, 0x66,
    0x6C, 0x61, 0x73, 0x68, 0x2E, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x3A, 0x44, 0x69, 0x73,
    0x70, 0x6C, 0x61, 0x79, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x1C, 0x66, 0x6C, 0x61, 0x73, 0x68,
    0x2E, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x3A, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x44, 0x69, 0x73,
    0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x04, 0x73, 0x74, 0x6F, 0x70, 0x0E, 0x61, 0x64, 0x64,
    0x46, 0x72, 0x61, 0x6D, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x06, 0x4F, 0x62, 0x6A, 0x65,
    0x63, 0x74, 0x0F, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
    0x65, 0x72, 0x0D, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74,
    0x11, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4F, 0x62, 0x6A, 0x65,
    0x63, 0x74, 0x16, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74,
    0x43, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x06, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65,
    0x27, 0x16, 0x01, 0x16, 0x03, 0x18, 0x05, 0x16, 0x06, 0x17, 0x01, 0x05, 0x00, 0x05, 0x00, 0x08,
    0x0E, 0x08, 0x0F, 0x16, 0x10, 0x08, 0x11, 0x16, 0x12, 0x16, 0x13, 0x08, 0x14, 0x16, 0x15, 0x16,
    0x16, 0x08, 0x17, 0x16, 0x18, 0x16, 0x19, 0x16, 0x1A, 0x08, 0x1B, 0x08, 0x1C, 0x08, 0x1D, 0x08,
    0x1E, 0x16, 0x1F, 0x16, 0x20, 0x16, 0x21, 0x08, 0x22, 0x16, 0x23, 0x16, 0x24, 0x08, 0x25, 0x1A,
    0x05, 0x1A, 0x26, 0x1A, 0x27, 0x1A, 0x28, 0x1A, 0x29, 0x1A, 0x2A, 0x1A, 0x2B, 0x02, 0x26, 0x06,
    0x07, 0x04, 0x01, 0x05, 0x08, 0x09, 0x0A, 0x0B, 0x02, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12,
    0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x03, 0x20, 0x21,
    0x22, 0x23, 0x24, 0x25, 0x26, 0x17, 0x07, 0x01, 0x02, 0x07, 0x02, 0x04, 0x07, 0x04, 0x07, 0x07,
    0x05, 0x08, 0x07, 0x05, 0x09, 0x07, 0x05, 0x0A, 0x07, 0x05, 0x0B, 0x07, 0x05, 0x0C, 0x09, 0x0D,
    0x01, 0x09, 0x2C, 0x01, 0x09, 0x2D, 0x01, 0x09, 0x08, 0x01, 0x09, 0x09, 0x01, 0x09, 0x0A, 0x01,
    0x09, 0x0B, 0x01, 0x09, 0x0C, 0x01, 0x07, 0x04, 0x2E, 0x07, 0x0D, 0x2F, 0x07, 0x02, 0x30, 0x07,
    0x02, 0x31, 0x07, 0x02, 0x32, 0x07, 0x02, 0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x08, 0x03, 0x00,
    0x06, 0x06, 0x03, 0x00, 0x00, 0x02, 0x00, 0x04, 0x01, 0x00, 0x01, 0x05, 0x01, 0x00, 0x02, 0x06,
    0x01, 0x00, 0x03, 0x07, 0x01, 0x00, 0x04, 0x08, 0x01, 0x00, 0x05, 0x00, 0x00, 0x01, 0x07, 0x01,
    0x01, 0x04, 0x01, 0x00, 0x08, 0x00, 0x01, 0x01, 0x09, 0x0A, 0x03, 0xD0, 0x30, 0x47, 0x00, 0x00,
    0x01, 0x02, 0x01, 0x0A, 0x0B, 0x0C, 0xD0, 0x30, 0xD0, 0x27, 0x61, 0x09, 0x5D, 0x0A, 0x4F, 0x0A,
    0x00, 0x47, 0x00, 0x00, 0x02, 0x01, 0x01, 0x0A, 0x0B, 0x08, 0xD0, 0x30, 0x5D, 0x0A, 0x4F, 0x0A,
    0x00, 0x47, 0x00, 0x00, 0x03, 0x01, 0x01, 0x0A, 0x0B, 0x08, 0xD0, 0x30, 0x5D, 0x0A, 0x4F, 0x0A,
    0x00, 0x47, 0x00, 0x00, 0x04, 0x01, 0x01, 0x0A, 0x0B, 0x08, 0xD0, 0x30, 0x5D, 0x0A, 0x4F, 0x0A,
    0x00, 0x47, 0x00, 0x00, 0x05, 0x01, 0x01, 0x0A, 0x0B, 0x08, 0xD0, 0x30, 0x5D, 0x0A, 0x4F, 0x0A,
    0x00, 0x47, 0x00, 0x00, 0x06, 0x0B, 0x01, 0x0A, 0x0B, 0x24, 0xD0, 0x30, 0xD0, 0x49, 0x00, 0x5D,
    0x0B, 0x24, 0x00, 0xD0, 0x66, 0x0C, 0x24, 0x0B, 0xD0, 0x66, 0x0D, 0x24, 0x15, 0xD0, 0x66, 0x0E,
    0x24, 0x1F, 0xD0, 0x66, 0x0F, 0x24, 0x2A, 0xD0, 0x66, 0x10, 0x4F, 0x0B, 0x0A, 0x47, 0x00, 0x00,
    0x07, 0x02, 0x01, 0x01, 0x09, 0x27, 0xD0, 0x30, 0x65, 0x00, 0x60, 0x11, 0x30, 0x60, 0x12, 0x30,
    0x60, 0x13, 0x30, 0x60, 0x14, 0x30, 0x60, 0x15, 0x30, 0x60, 0x16, 0x30, 0x60, 0x02, 0x30, 0x60,
    0x02, 0x58, 0x00, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x68, 0x01, 0x47, 0x00, 0x00
};

const uint8_t DeclMultiplayerDisabled[] = {
    0x7B, 0x0D, 0x0A, 0x09, 0x69, 0x6E, 0x68, 0x65, 0x72, 0x69, 0x74, 0x20, 0x3D, 0x20, 0x22, 0x64,
    0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0x5F, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x69, 0x74, 0x69, 0x6F,
    0x6E, 0x22, 0x3B, 0x0D, 0x0A, 0x09, 0x65, 0x64, 0x69, 0x74, 0x20, 0x3D, 0x20, 0x7B, 0x0D, 0x0A,
    0x09, 0x09, 0x73, 0x77, 0x66, 0x49, 0x6E, 0x66, 0x6F, 0x20, 0x3D, 0x20, 0x7B, 0x0D, 0x0A, 0x09,
    0x09, 0x09, 0x73, 0x77, 0x66, 0x20, 0x3D, 0x20, 0x22, 0x73, 0x77, 0x66, 0x2F, 0x6D, 0x61, 0x69,
    0x6E, 0x5F, 0x6D, 0x65, 0x6E, 0x75, 0x2F, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x73, 0x2F, 0x67,
    0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2E, 0x73, 0x77, 0x66, 0x22, 0x3B, 0x0D, 0x0A, 0x09, 0x09,
    0x7D, 0x0D, 0x0A, 0x09, 0x09, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x3D, 0x20, 0x22, 0x22, 0x3B,
    0x0D, 0x0A, 0x09, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x20,
    0x3D, 0x20, 0x22, 0x23, 0x73, 0x74, 0x72, 0x5F, 0x63, 0x6F, 0x64, 0x65, 0x5F, 0x6D, 0x61, 0x69,
    0x6E, 0x6D, 0x65, 0x6E, 0x75, 0x5F, 0x70, 0x6C, 0x61, 0x79, 0x5F, 0x6F, 0x6E, 0x6C, 0x69, 0x6E,
    0x65, 0x5F, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3B, 0x0D, 0x0A, 0x09, 0x09, 0x67, 0x61, 0x6D, 0x65,
    0x49, 0x6E, 0x66, 0x6F, 0x20, 0x3D, 0x20, 0x7B, 0x0D, 0x0A, 0x09, 0x09, 0x09, 0x63, 0x61, 0x6D,
    0x65, 0x72, 0x61, 0x50, 0x6C, 0x61, 0x63, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x3D, 0x20, 0x22,
    0x63, 0x61, 0x6D, 0x65, 0x72, 0x61, 0x5F, 0x70, 0x6C, 0x61, 0x79, 0x5F, 0x6F, 0x6E, 0x6C, 0x69,
    0x6E, 0x65, 0x22, 0x3B, 0x0D, 0x0A, 0x09, 0x09, 0x7D, 0x0D, 0x0A, 0x09, 0x09, 0x63, 0x68, 0x69,
    0x6C, 0x64, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x3D, 0x20, 0x7B, 0x0D, 0x0A,
    0x09, 0x09, 0x09, 0x6E, 0x75, 0x6D, 0x20, 0x3D, 0x20, 0x31, 0x3B, 0x0D, 0x0A, 0x09, 0x09, 0x09,
    0x69, 0x74, 0x65, 0x6D, 0x5B, 0x30, 0x5D, 0x20, 0x3D, 0x20, 0x22, 0x6F, 0x70, 0x74, 0x69, 0x6F,
    0x6E, 0x73, 0x5F, 0x6C, 0x69, 0x73, 0x74, 0x5F, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6F, 0x72, 0x79,
    0x22, 0x3B, 0x0D, 0x0A, 0x09, 0x09, 0x7D, 0x0D, 0x0A, 0x09, 0x7D, 0x0D, 0x0A, 0x7D
};

const uint8_t DeclPlayOnlineDisabled[] = {
    0x7B, 0x0D, 0x0A, 0x09, 0x69, 0x6E, 0x68, 0x65, 0x72, 0x69, 0x74, 0x20, 0x3D, 0x20, 0x22, 0x64,
    0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0x5F, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x69, 0x74, 0x69, 0x6F,
    0x6E, 0x22, 0x3B, 0x0D, 0x0A, 0x09, 0x65, 0x64, 0x69, 0x74, 0x20, 0x3D, 0x20, 0x7B, 0x0D, 0x0A,
    0x09, 0x09, 0x73, 0x77, 0x66, 0x49, 0x6E, 0x66, 0x6F, 0x20, 0x3D, 0x20, 0x7B, 0x0D, 0x0A, 0x09,
    0x09, 0x09, 0x73, 0x77, 0x66, 0x20, 0x3D, 0x20, 0x22, 0x73, 0x77, 0x66, 0x2F, 0x6D, 0x61, 0x69,
    0x6E, 0x5F, 0x6D, 0x65, 0x6E, 0x75, 0x2F, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x73, 0x2F, 0x67,
    0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2E, 0x73, 0x77, 0x66, 0x22, 0x3B, 0x0D, 0x0A, 0x09, 0x09,
    0x7D, 0x0D, 0x0A, 0x09, 0x09, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x3D, 0x20, 0x22, 0x22, 0x3B,
    0x0D, 0x0A, 0x09, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x20,
    0x3D, 0x20, 0x22, 0x23, 0x73, 0x74, 0x72, 0x5F, 0x63, 0x6F, 0x64, 0x65, 0x5F, 0x6D, 0x61, 0x69,
    0x6E, 0x6D, 0x65, 0x6E, 0x75, 0x5F, 0x70, 0x6C, 0x61, 0x79, 0x5F, 0x6F, 0x6E, 0x6C, 0x69, 0x6E,
    0x65, 0x5F, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3B, 0x0D, 0x0A, 0x09, 0x09, 0x67, 0x61, 0x6D, 0x65,
    0x49, 0x6E, 0x66, 0x6F, 0x20, 0x3D, 0x20, 0x7B, 0x0D, 0x0A, 0x09, 0x09, 0x09, 0x63, 0x61, 0x6D,
    0x65, 0x72, 0x61, 0x50, 0x6C, 0x61, 0x63, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x3D, 0x20, 0x22,
    0x63, 0x61, 0x6D, 0x65, 0x72, 0x61, 0x5F, 0x70, 0x6C, 0x61, 0x79, 0x5F, 0x6F, 0x6E, 0x6C, 0x69,
    0x6E, 0x65, 0x22, 0x3B, 0x0D, 0x0A, 0x09, 0x09, 0x7D, 0x0D, 0x0A, 0x09, 0x09, 0x63, 0x68, 0x69,
    0x6C, 0x64, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x3D, 0x20, 0x7B, 0x0D, 0x0A,
    0x09, 0x09, 0x09, 0x6E, 0x75, 0x6D, 0x20, 0x3D, 0x20, 0x31, 0x3B, 0x0D, 0x0A, 0x09, 0x09, 0x09,
    0x69, 0x74, 0x65, 0x6D, 0x5B, 0x30, 0x5D, 0x20, 0x3D, 0x20, 0x22, 0x6F, 0x70, 0x74, 0x69, 0x6F,
    0x6E, 0x73, 0x5F, 0x6C, 0x69, 0x73, 0x74, 0x5F, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6F, 0x72, 0x79,
    0x22, 0x3B, 0x0D, 0x0A, 0x09, 0x09, 0x7D, 0x0D, 0x0A, 0x09, 0x7D, 0x0D, 0x0A, 0x7D
};

const std::vector<std::string> Languages = {
    "french", "italian", "german", "spanish", "russian", "polish", "japanese", "latin_spanish",
    "portuguese", "traditional_chinese", "simplified_chinese", "korean", "english"
};

const std::vector<std::string> SWFs = {
    "swf/hud/menus/battle_arena/play_online_screen.swf", "swf/hud/menus/battle_arena/lobby.swf",
    "swf/main_menu/screens/battle_arena.swf", "swf/main_menu/screens/match_browser.swf"
};

const std::vector<std::string> OnlineSafeMapResourceTypes = {
    "advancedscreenviewshake", "ambientsh", "audiolog", "audiologstory", "automap", "automapplayerprofile", "automapproperties",
    "automapsoundprofile", "basemodel", "binarygorecontainer", "binarymd6def", "binaryrig", "colorlut", "cswf", "env", "font", "fontfx",
    "fx", "gameitem", "globalfonttable", "gorebehavior", "gorecontainer", "gorewounds", "handsbobcycle", "havokragdoll", "havokshape",
    "highlightlos", "highlights", "hitconfirmationsoundsinfo", "hud", "hudelement", "image", "lightrig", "lodgroup", "material2", "md6def",
    "model", "modelasset", "modelstream", "particle", "particlestage", "renderlayerdefinition", "renderparm", "renderparmmeta", "renderprogdatabase",
    "renderprogflag", "renderprogresource", "ribbon2", "rumble", "screenviewshake", "soundevent", "soundpack", "soundrtpc", "soundstate", "soundswitch",
    "speaker", "staticimage", "swfresources", "uianchor", "uicolor", "weaponreticle", "weaponreticleswfinfo", "impacteffect", "uiweapon",
    "globalinitialwarehouse", "globalshell", "warehouseitem", "warehouseofflinecontainer", "tooltip"
};

const std::vector<std::string> OnlineSafeModNameKeywords = {
    "/eternalmod/", ".tga", ".png", ".swf", ".bimage", "/advancedscreenviewshake/", "/audiolog/", "/audiologstory/", "/automap/", "/automapplayerprofile/",
    "/automapproperties/", "/automapsoundprofile/", "/env/", "/font/", "/fontfx/", "/fx/", "/gameitem/", "/globalfonttable/", "/gorebehavior/",
    "/gorecontainer/", "/gorewounds/", "/handsbobcycle/", "/highlightlos/", "/highlights/", "/hitconfirmationsoundsinfo/", "/hud/", "/hudelement/",
    "/lightrig/", "/lodgroup/", "/material2/", "/md6def/", "/modelasset/", "/particle/", "/particlestage/", "/renderlayerdefinition/", "/renderparm/",
    "/renderparmmeta/", "/renderprogflag/", "/ribbon2/", "/rumble/", "/soundevent/", "/soundpack/", "/soundrtpc/", "/soundstate/", "/soundswitch/",
    "/speaker/", "/staticimage/", "/swfresources/", "/uianchor/", "/uicolor/", "/weaponreticle/", "/weaponreticleswfinfo/", "/entitydef/light/", "/entitydef/fx",
    "/entitydef/", "/impacteffect/", "/uiweapon/", "/globalinitialwarehouse/", "/globalshell/", "/warehouseitem/", "/warehouseofflinecontainer/", "/tooltip/"
};

/**
 * @brief Get the parent Mod object for the multiplayer disabler mods
 * 
 * @return parent Mod object
 */
Mod GetParentMod()
{
    static Mod parentMod;

    if (parentMod.LoadPriority == INT_MIN)
        return parentMod;

    parentMod.LoadPriority = INT_MIN;
    parentMod.RequiredVersion = Version;

    return parentMod;
}

/**
 * @brief Get the multiplayer disabler mods
 * 
 * @return Vector containing the multiplayer disabler mods
 */
std::vector<ResourceModFile> GetMultiplayerDisablerMods()
{
    static std::vector<ResourceModFile> multiplayerDisablerMods;

    if (!multiplayerDisablerMods.empty())
        return multiplayerDisablerMods;

    ResourceModFile multiplayerDisablerDecl = ResourceModFile(GetParentMod(), "generated/decls/menuelement/main_menu/screens/multiplayer.decl", "gameresources_patch2");
    multiplayerDisablerDecl.FileBytes = std::vector<std::byte>((std::byte*)DeclMultiplayerDisabled, (std::byte*)DeclMultiplayerDisabled + sizeof(DeclMultiplayerDisabled));
    multiplayerDisablerMods.push_back(multiplayerDisablerDecl);

    ResourceModFile playOnlineDisablerDecl = ResourceModFile(GetParentMod(), "generated/decls/menuelement/main_menu/screens/battle_arena_play_online.decl", "gameresources_patch2");
    multiplayerDisablerDecl.FileBytes = std::vector<std::byte>((std::byte*)DeclPlayOnlineDisabled, (std::byte*)DeclPlayOnlineDisabled + sizeof(DeclPlayOnlineDisabled));
    multiplayerDisablerMods.push_back(multiplayerDisablerDecl);

    for (auto &swf : SWFs) {
        ResourceModFile multiplayerDisablerSwf(GetParentMod(), swf, "gameresources_patch2");
        multiplayerDisablerSwf.FileBytes = std::vector<std::byte>((std::byte*)GenericSwfData, (std::byte*)GenericSwfData + sizeof(GenericSwfData));
        multiplayerDisablerMods.push_back(multiplayerDisablerSwf);
    }

    for (auto &language : Languages) {
        ResourceModFile multiplayerDisablerBlang(GetParentMod(), "EternalMod/strings/" + language + ".json", "gameresources_patch2");
        multiplayerDisablerBlang.IsBlangJson = true;
        multiplayerDisablerBlang.FileBytes = std::vector<std::byte>((std::byte*)BlangJsonMultiplayerDisabled, (std::byte*)BlangJsonMultiplayerDisabled + sizeof(BlangJsonMultiplayerDisabled));
        multiplayerDisablerMods.push_back(multiplayerDisablerBlang);
    }

    return multiplayerDisablerMods;
}

/**
 * @brief Checks wether a given mod is safe for online use
 * 
 * @param mod Mod to check
 * @return True if the mod is safe for online, false otherwise 
 */
bool IsModSafeForOnline(ResourceModFile &mod)
{
    if (mod.IsAssetsInfoJson && mod.AssetsInfo.has_value()) {
        if (!mod.AssetsInfo.value().Assets.empty()) {
            if (StartsWith(mod.ResourceName, "pvp"))
                return false;

            for (auto &asset : mod.AssetsInfo.value().Assets) {
                if (std::find(OnlineSafeMapResourceTypes.begin(), OnlineSafeMapResourceTypes.end(), asset.MapResourceType) == OnlineSafeMapResourceTypes.end())
                    return false;
            }
        }

        if (!mod.AssetsInfo.value().Resources.empty() && StartsWith(mod.ResourceName, "pvp"))
            return false;
    }

    if (!StartsWith(mod.Name, "generated/decls/"))
        return true;

    for (auto &keyword : OnlineSafeModNameKeywords) {
        if (mod.Name.find(keyword) != std::string::npos)
            return true;
    }

    return false;
}